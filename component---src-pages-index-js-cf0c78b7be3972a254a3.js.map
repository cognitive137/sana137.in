{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/index.js"],"names":["Header","siteTitle","description","headerImg","hideName","homeName","site","siteMetadata","style","backgroundColor","backgroundImage","className","margin","defaultProps","Layout","children","title","id","author","name","require","query","IndexPage","props","edges","data","allMarkdownRemark","nodes","index","photo","map","edge","frontmatter","node","published","moment","date","fromNow","cover","key","path","to","tags","length","excerpt","src","alt","timeToRead"],"mappings":"yjBAIMA,EAAS,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAU3CC,EATE,OASgBC,KAAKC,aAAvBF,SACR,OACE,4BACEG,MAAO,CACLC,gBAAgB,UAChBC,gBAAgB,OAAQP,EAAT,KAEjBQ,UAAW,qBAEX,yBAAKA,UAAW,SACd,yBAAKA,UAAW,uBACd,wBAAIH,MAAO,CAAEI,OAAQ,GAAKD,UAAW,cAClCV,GAEH,6BACA,wBAAIU,UAAW,oBAAqBT,IAClCE,GAAY,4BAAKC,OAY7BL,EAAOa,aAAe,CACpBZ,UAAU,iBACVC,YAAY,kBAGCF,Q,YCOAc,EAxCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACRT,EADuB,OACvBA,KAcR,OACE,yBAAKK,UAAW,iBACd,yBAAKA,UAAW,gBACd,kBAAC,EAAD,CACEV,UAAWK,EAAKC,aAAaS,MAC7Bd,YAAaI,EAAKC,aAAaL,YAC/BC,UAAWG,EAAKC,aAAaJ,YAE/B,0BAAMQ,UAAW,kBAAmBM,GAAI,aACrCF,GAEH,kBAAC,IAAD,CACEG,OAAQZ,EAAKC,aAAaW,OAC1BC,KAAMb,EAAKC,aAAaY,KACxBR,UAAW,yB,6CCpCrBS,EAAQ,QACD,IAAMC,EAAK,aA6BH,SAASC,EAAUC,GAChC,IAAMC,EAAQD,EAAME,KAAKC,kBAAkBF,MACrCG,EAAQJ,EAAME,KAAKC,kBAAkBC,MAC3C,IAAK,IAAIC,KAASJ,EAAOA,EAAMI,GAAN,iBAAoBJ,EAAMI,GAAWD,EAAMC,IAH7B,MAIQL,EAAME,KAAKnB,KAAKC,aAAhCY,GAJQ,EAI/BD,OAJ+B,EAIRC,MAAMU,EAJE,EAIFA,MACrC,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAKb,MAAM,SACX,yBAAKL,UAAW,SACd,yBAAKA,UAAW,aACba,EAAMM,KAAI,SAACC,EAAMH,GAAW,IACnBI,EAAgBD,EAAKE,KAArBD,YACFE,EAAYC,IAAOH,EAAYI,MAAMC,UACrCC,EAAQN,EAAYM,MAC1B,OACE,6BAAS3B,UAAW,YAAa4B,IAAKP,EAAYQ,MAChD,kBAAC,OAAD,CAAMC,GAAIT,EAAYQ,KAAM7B,UAAW,wBACrC,yBACEA,UAAW,kBACXH,MAAO,CACLE,gBAAgB,QAAS4B,EAAV,SAIrB,yBAAK3B,UAAW,qBACd,kBAAC,OAAD,CACE8B,GAAIT,EAAYQ,KAChB7B,UAAW,0BAEX,4BAAQA,UAAU,kBAChB,0BAAMA,UAAW,kBACdqB,EAAYU,MAAQV,EAAYU,KAAK,GAAGC,OACrCX,EAAYU,KAAK,GAAjB,MADH,GAEO,IACPR,GAEH,wBAAIvB,UAAW,mBAAoBqB,EAAYhB,QAEjD,6BAASL,UAAU,mBACjB,uBAAGA,UAAW,WACXa,EAAMI,GAAOK,KAAKD,YAAYY,WAIrC,4BAAQjC,UAAW,kBACjB,wBAAIA,UAAW,eACb,wBAAIA,UAAW,oBACb,yBAAKA,UAAW,uBAAwBQ,GAWxC,uBAAGR,UAAW,iBACZ,yBACEkC,IAAKhB,EACLlB,UAAW,iBACXmC,IAAK3B,OAKb,0BAAMR,UAAW,gBACda,EAAMI,GAAOmB,WADhB,wB","file":"component---src-pages-index-js-cf0c78b7be3972a254a3.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nconst Header = ({ siteTitle, description, headerImg, hideName }) => {\n  const data = useStaticQuery(graphql`\n    query getHomeName {\n      site {\n        siteMetadata {\n          homeName\n        }\n      }\n    }\n  `);\n  const { homeName } = data.site.siteMetadata;\n  return (\n    <header\n      style={{\n        backgroundColor: `#86BD26`,\n        backgroundImage: `url(${headerImg})`,\n      }}\n      className={'site-header outer'}\n    >\n      <div className={'inner'}>\n        <div className={'site-header-content'}>\n          <h1 style={{ margin: 0 }} className={'site-title'}>\n            {siteTitle}\n          </h1>\n          <br />\n          <h2 className={'site-description'}>{description}</h2>\n          {!hideName && <h2>{homeName}</h2>}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n  description: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: `Sana's stories`,\n  description: `Hi, I am Sana!`,\n};\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Header from './header';\nimport Footer from './footer';\n\nconst Layout = ({ children }) => {\n  const { site } = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          author\n          description\n          headerImg\n          name\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <div className={'home-template'}>\n      <div className={'site-wrapper'}>\n        <Header\n          siteTitle={site.siteMetadata.title}\n          description={site.siteMetadata.description}\n          headerImg={site.siteMetadata.headerImg}\n        />\n        <main className={'site-main outer'} id={'site-main'}>\n          {children}\n        </main>\n        <Footer\n          author={site.siteMetadata.author}\n          name={site.siteMetadata.name}\n          className={'site-footer outer'}\n        />\n      </div>\n    </div>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { graphql, Link } from 'gatsby';\nimport moment from 'moment';\n\nrequire('prismjs/plugins/line-numbers/prism-line-numbers.css');\nexport const query = graphql`\n  query BlogPostList {\n    site {\n      siteMetadata {\n        author\n        name\n        photo\n      }\n    }\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      nodes {\n        timeToRead\n      }\n      edges {\n        node {\n          frontmatter {\n            cover\n            date\n            excerpt\n            path\n            tags\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function IndexPage(props) {\n  const edges = props.data.allMarkdownRemark.edges;\n  const nodes = props.data.allMarkdownRemark.nodes;\n  for (let index in edges) edges[index] = { ...edges[index], ...nodes[index] };\n  const { author: twitterHandle, name, photo } = props.data.site.siteMetadata;\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div className={'inner'}>\n        <div className={'post-feed'}>\n          {edges.map((edge, index) => {\n            const { frontmatter } = edge.node;\n            const published = moment(frontmatter.date).fromNow();\n            const cover = frontmatter.cover;\n            return (\n              <article className={'post-card'} key={frontmatter.path}>\n                <Link to={frontmatter.path} className={'post-card-image-link'}>\n                  <div\n                    className={'post-card-image'}\n                    style={{\n                      backgroundImage: `url(\"${cover}\")`,\n                    }}\n                  ></div>\n                </Link>\n                <div className={'post-card-content'}>\n                  <Link\n                    to={frontmatter.path}\n                    className={'post-card-content-link'}\n                  >\n                    <header className=\"postCardHeader\">\n                      <span className={'post-card-tags'}>\n                        {frontmatter.tags && frontmatter.tags[0].length\n                          ? frontmatter.tags[0] + ` â€¢ `\n                          : ``}{' '}\n                        {published}\n                      </span>\n                      <h2 className={'post-card-title'}>{frontmatter.title}</h2>\n                    </header>\n                    <section className=\"postCardExcerpt\">\n                      <p className={'excerpt'}>\n                        {edges[index].node.frontmatter.excerpt}\n                      </p>\n                    </section>\n                  </Link>\n                  <footer className={'post-card-meta'}>\n                    <ul className={'author-list'}>\n                      <li className={'author-list-item'}>\n                        <div className={'author-name-tooltip'}>{name}</div>\n                        {/* <a\n                          href={`https://www.twitter.com/${twitterHandle}`}\n                          className={'static-avatar'}\n                        >\n                          <img\n                            src={photo}\n                            className={'avatar-wrapper'}\n                            alt={name}\n                          />\n                        </a> */}\n                        <a className={'static-avatar'}>\n                          <img\n                            src={photo}\n                            className={'avatar-wrapper'}\n                            alt={name}\n                          />\n                        </a>\n                      </li>\n                    </ul>\n                    <span className={'reading-time'}>\n                      {edges[index].timeToRead} min read\n                    </span>\n                  </footer>\n                </div>\n              </article>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n"],"sourceRoot":""}